//If you use the dash next to a wall it will keep the moveSpeed to 0


#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define OLED_RESET 4
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET);

unsigned long time;
unsigned long timeDash = 0;

int PlayerSizeX=7;
int PlayerSizeY=7;


const int C=262;
const int D=294;
const int E=330;
const int F=349;
const int G=392;
const int A=440;
const int B=494;

const int C2=524;
const int Ds=622;
const int Fs=740;


#define bottonL 12
#define bottonR 11
#define bottonJump 10
#define bottonDash 9
#define bip 13

int cameraPositionX=0;
int cameraStartPosition=100;
int cameraRelativePosition=100;
int cameraCenterR=60;
int cameraCenterL=60;
int cameraAdj=0;
int cameraDistanceAdj=0;

int moveReset=0;
int bottonStateR=0;
int bottonStateL=0;
int moveSpeedRight=2;
int moveSpeedLeft=2;
int fallingSpeed=2;
int raisingSpeed=2;
int bottonStateJump=0;
int bottonStateDash=0;
int floatX =0;
int timeinAir=0;

int bottonHoldJump=1;

int PlayerCx=95;
int PlayerCy=57;

int RightPlayerHBx=PlayerCx + 7;
int DownPlayerHBy=PlayerCy - 7;
//1 equal right 0 equals left
int PlayerFaceDirection=1;


int DashDistance= 15;
int numofDashes=1;
int numofJumps=1;

boolean airState=false;

int ground = 57;
int BasementFloor=57;


//Images
const unsigned char Pinchos [] PROGMEM = {
	0x55, 0x55, 0x00, 0xff, 0xff, 0x80
};
const unsigned char Floor [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};
// 'Proyecto nuevo (2)', 1x24px
const unsigned char Wall [] PROGMEM = {
	0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
};
const unsigned char player [] PROGMEM = {
	0xfe, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfe
};
//I just took out some pixels
//Take the Image and replace it with a text format
const unsigned char YouWon[] PROGMEM = {

	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef, 0x1f, 0xe0, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0xf0, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7c, 0x78, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x78, 0x38, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x70, 0x38, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x3c, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x3c, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x3c, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x38, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x78, 0x38, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3c, 0x78, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0xf0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1f, 0xe0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x7c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x7c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x7c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x70, 0xfc, 0x3c, 0x3f, 0x00, 0x1f, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0xfe, 0x3c, 0x7f, 0x83, 0xff, 0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0xee, 0x3c, 0xff, 0xc3, 0xff, 0x83, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0xee, 0x38, 0xf1, 0xe3, 0xe3, 0xc7, 0xc7, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x39, 0xee, 0x79, 0xe0, 0xe3, 0xc1, 0xc7, 0x83, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x39, 0xcf, 0x79, 0xc0, 0xf3, 0xc1, 0xc7, 0x03, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3d, 0xc7, 0x71, 0xc0, 0xf3, 0x81, 0xc7, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3d, 0xc7, 0x71, 0xc0, 0xf3, 0x81, 0xc7, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0x71, 0xc0, 0xf3, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf1, 0xc0, 0xe3, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x83, 0xe1, 0xe0, 0xe3, 0x81, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x83, 0xe0, 0xf1, 0xe3, 0x81, 0xc3, 0xc1, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x83, 0xe0, 0xff, 0xc3, 0x81, 0xc3, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0xe0, 0x7f, 0x83, 0x81, 0xc1, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 

};

void displayofAll(){

	display.clearDisplay(); //for Clearing the display

	display.drawBitmap(93+cameraPositionX+cameraAdj, 52, Floor, 35, 2, WHITE);
	display.drawBitmap(60+cameraPositionX+cameraAdj, 30, Floor, 35, 2, WHITE);
	display.drawBitmap(96+cameraPositionX+cameraAdj, 15, Floor, 35, 2, WHITE);
	display.drawBitmap(130+cameraPositionX+cameraAdj, 52, Floor, 35, 2, WHITE);

  display.drawBitmap(PlayerCx+cameraPositionX+cameraAdj , PlayerCy, player, 7, 7, WHITE);
	display.drawBitmap(55+cameraPositionX+cameraAdj, 62, Pinchos, 17, 2, WHITE);
	display.drawBitmap(20+cameraPositionX+cameraAdj,41,Wall,1,24,WHITE);
	display.drawBitmap(40+cameraPositionX+cameraAdj,41,Wall,1,24,WHITE);


  display.display();

}

void setup(){

	pinMode(bottonL, INPUT);
	pinMode(bottonR, INPUT);
	pinMode(bottonJump, INPUT);
	pinMode(bottonDash, INPUT);
	pinMode(bip, OUTPUT);

	display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
	displayofAll();
}

void airDetection (){

	if (PlayerCy != ground){
		airState= true;
	}
}

void movementPlayer(){
	
	bottonStateR=digitalRead(bottonR);
	if (bottonStateR==1){
		PlayerCx= PlayerCx + moveSpeedRight;
		PlayerFaceDirection=1;
	}
	if ((bottonStateR==1)&&(PlayerCx>=100)){

	//We can do this but with the variabels PlayerCx to be more precise when reenterinf the zone

		if (PlayerCx>=180){
			cameraPositionX=cameraPositionX-moveSpeedRight;

		}
		if ((PlayerCx>=100)&&(PlayerCx<=180)){
			//falta una  suma
			
			cameraPositionX=cameraPositionX-moveSpeedRight;
			cameraRelativePosition=cameraRelativePosition-1;
			cameraAdj=cameraAdj-1;


		}
	


	}
	
	
	bottonStateL=digitalRead(bottonL);
	if ((bottonStateL==1)&&(PlayerCx>=100)){


		if (PlayerCx>=180){
			cameraPositionX=cameraPositionX+moveSpeedLeft;

		}
		if ((PlayerCx>=100)&&(PlayerCx<=180)){
			//falta una  suma ||PlayerCx<10)&&(PlayerCx
			
			cameraPositionX=cameraPositionX+moveSpeedLeft;
			cameraRelativePosition=cameraRelativePosition+1;
			cameraAdj=cameraAdj+1;


		}
//Restando la Relative Position a la start se da el effecto, voy por un tÃ©

	}
	if (bottonStateL==1){
		PlayerCx= PlayerCx - moveSpeedLeft;
		PlayerFaceDirection=0;
	}

	
}



void platformWallHB(){
	//Here Im working to make the wall detect if you dash in front of it, so It dont let you pass
	//The wall is in X=20
	//The problem of the cube been abel to pas to the other side is from the code down below

	if ((PlayerCx==13)||(PlayerCx==14)){
		PlayerCx=13;
		moveSpeedRight=0;

	}
	if ((PlayerCx !=13)||(PlayerCy<=35)){
		moveSpeedRight=2;
	}
	if ((PlayerCx==21)||(PlayerCx==20)){
		PlayerCx=21;
		moveSpeedLeft=0;
	}
	if ((PlayerCx !=21)||(PlayerCy<=35)){
	moveSpeedLeft=2;
	}		

}


//Here Im going to make the function to make the replication of walls easier
void WallHB(int HBRight,int HBLeft,int heightHBM){
	//Here Im working to make the wall detect if you dash in front of it, so It dont let you pass
	//The wall is in X=20
	//The problem of the cube been abel to pas to the other side is from the code down below

	if ((PlayerCx==HBRight-PlayerSizeX)||(PlayerCx==HBRight+1-PlayerSizeX)||(PlayerCx==HBLeft)||(PlayerCx==HBLeft-1)||
			(PlayerCx==HBRight-1-PlayerSizeX)||(PlayerCx==HBRight-2-PlayerSizeX)||(PlayerCx==HBLeft+1)||(PlayerCx==HBLeft+2)){
		

		if ((PlayerCx==HBRight-PlayerSizeX)||(PlayerCx==HBRight+1-PlayerSizeX)){
			PlayerCx=HBRight - PlayerSizeX;
			moveSpeedRight=0;

		}
		if ((PlayerCx != HBRight-PlayerSizeX)||(PlayerCy<=heightHBM-PlayerSizeY)){
			moveSpeedRight=2;
		}
		if ((PlayerCx==HBLeft)||(PlayerCx==HBLeft-1)){
			PlayerCx=HBLeft;
			moveSpeedLeft=0;
		}
		if ((PlayerCx !=HBLeft)||(PlayerCy<=heightHBM-PlayerSizeY)){
		moveSpeedLeft=2;
		}	
		if (((PlayerCx > HBRight-PlayerSizeX-2)&&(PlayerCx < HBRight))&&((PlayerCy == heightHBM-PlayerSizeY)||(PlayerCy == heightHBM-PlayerSizeY+1))){

		}
	}

}
void FwallDashHB(int HBRight,int HBLeft, int heightHBM){
	if 	((PlayerFaceDirection==1)&&(numofDashes==1)&&(bottonStateDash==1)&&(DashDistance+PlayerCx>=HBRight-PlayerSizeX)
	&&(DashDistance+PlayerCx<=HBLeft+DashDistance-PlayerSizeX)&&(PlayerCy>=heightHBM-PlayerSizeY)){
		PlayerCx=HBRight-PlayerSizeX;
		
		DashDistance=0;
	}
	if ((PlayerFaceDirection==0)&&(numofDashes==1)&&(bottonStateDash==1)&&(PlayerCx-DashDistance>=HBLeft-DashDistance)
	&&(PlayerCx-DashDistance<=HBLeft)&&(PlayerCy>=heightHBM-PlayerSizeY)){
		PlayerCx=HBLeft;
		
		DashDistance=0;
	}
}

void wallDashHB(){
	if 	((PlayerFaceDirection==1)&&(numofDashes==1)&&(bottonStateDash==1)&&(DashDistance+PlayerCx>=13)&&(DashDistance+PlayerCx<=28)){
		PlayerCx=13;
		moveSpeedRight=0;
		DashDistance=0;
	}
	if ((PlayerFaceDirection==0)&&(numofDashes==1)&&(bottonStateDash==1)&&(PlayerCx-DashDistance>=6)&&(PlayerCx-DashDistance<=21)){
		PlayerCx=21;
		moveSpeedLeft=0;
		DashDistance=0;
	}
}

void DashMidAir(){

	bottonStateDash=digitalRead(bottonDash);
	
	if ((bottonStateDash==1)&&(time>250+timeDash)){
		
		timeDash=time;
		if ((PlayerFaceDirection==1)&&(numofDashes==1)){
			tone(bip,Ds,70);
 		  delay(30);
  		tone(bip,Fs,100);

			
			FwallDashHB(40,41,40);
			FwallDashHB(20,21,40);
			
			PlayerCx= PlayerCx + DashDistance;
			floatX=1;
			if ((PlayerCx>=100)){
				cameraPositionX=cameraPositionX-DashDistance;

			}
			DashDistance=15;
			delay(20);
			numofDashes=0;
			time=0;
			fallingSpeed=0;
		}
		if ((PlayerFaceDirection==0)&&(numofDashes==1)){
			tone(bip,Ds,70);
 		  delay(30);
  		tone(bip,Fs,100);

			FwallDashHB(40,41,40);
			FwallDashHB(20,21,40);
			PlayerCx= PlayerCx - DashDistance;
			if ((PlayerCx>=100)){
				cameraPositionX=cameraPositionX+DashDistance;

			}
			floatX=1;
			DashDistance=15;
			delay(20);
			numofDashes=0;
			time=0;
			fallingSpeed=0;
			
		}
	}
}

void jumpMidAirDown(){
	bottonStateJump=digitalRead(bottonJump);
	if ((bottonStateJump==1)&&(numofJumps >= 1)){
		tone(bip,D,100);
  	delay(50);
  	tone(bip,A,200);
		for(int i=0; i<8; i++){

			PlayerCy= PlayerCy -raisingSpeed;
			
			DashMidAir();
			WallHB(40,41,40);			
			WallHB(20,21,40);
			movementPlayer();
			

			
			
			numofJumps=0;
			if ((bottonStateDash==1)&&(floatX==1)){
				i=9;
				floatX=0;
			}
			displayofAll();

		}
	}
}

void pinchos(){

	if ((PlayerCx>49)&&(PlayerCx<68)&&(PlayerCy>56)){
	
		//I desasactivate the pikes for testing purposes, if you want them to work again, just erase the // bellow
		//PlayerCx=0;
		//PlayerCy=57;
		//delay(200);
		
	}
}

//For time reazons I wont be making a function for the hitbox of platforms while falling, but iut is posible,
//Just need to make the variabel i as a global one insted of just inside the for in
/*void stayingInPlatform(int startPosition,int endPosition, int heightPlatform,int i){

	if (((PlayerCx > startPosition-PlayerSizeX-2)&&(PlayerCx < endPosition))&&((PlayerCy == heightPlatform-PlayerSizeY)
			||(PlayerCy == heightPlatform+1-PlayerSizeY))){
		PlayerCy = heightPlatform-PlayerSizeY;
		i=0;
	}
}*/

void falling () {
	for(int i=57; i>(PlayerCy); i=i) {

		PlayerCy= PlayerCy +fallingSpeed;
		if (PlayerCy==58){
			PlayerCy=57;
		}
		DashMidAir();
		WallHB(20,21,40);
		WallHB(40,41,40);
		movementPlayer();
		
		

		
		
		jumpMidAirDown();
		pinchos();
		if (fallingSpeed==0){
			timeinAir= timeinAir+1;
		}
		if (timeinAir==3){

			fallingSpeed=2;

		}

		//Here you have to add the hitbox of your platform
		if (((PlayerCx > 96-PlayerSizeX-2)&&(PlayerCx < 128))&&((PlayerCy == 52-PlayerSizeY)||(PlayerCy == 53-PlayerSizeY))){
			PlayerCy = 45;
			i=0;
			}
		
		if (((PlayerCx > 60-PlayerSizeX-2)&&(PlayerCx < 92))&&((PlayerCy == 30-PlayerSizeY)||(PlayerCy == 31-PlayerSizeY))){
			PlayerCy = 30-PlayerSizeY;
			i=0;
			}
		if (((PlayerCx > 96-PlayerSizeX-2)&&(PlayerCx < 128))&&((PlayerCy == 15-PlayerSizeY)||(PlayerCy == 16-PlayerSizeY))){
			PlayerCy = 15-PlayerSizeY;
			i=0;
		}
		if (((PlayerCx > 128-PlayerSizeX-2)&&(PlayerCx < 167))&&((PlayerCy == 52-PlayerSizeY)||(PlayerCy == 53-PlayerSizeY))){
			PlayerCy = 52-PlayerSizeY;
			i=0;
		}

			


		displayofAll();
		}
	bottonHoldJump=1;
	numofDashes=1;
	numofJumps=1;
	floatX=0;
	timeinAir=0;

		
}
//We are going to use this to simplify when falling from a platform

void fallingFromPlatform(int startPosition,int endPosition, int heightPlatform){
	if (((PlayerCx < startPosition-PlayerSizeX)&&(PlayerCx >= startPosition-PlayerSizeX-2))||
		 ((PlayerCx > endPosition)&&(PlayerCx <= endPosition+2))){
			if (PlayerCy == heightPlatform-PlayerSizeY){

				falling();
			}
		
	}		

}



void loop() { 

	time=millis();
	
	bottonStateR=digitalRead(bottonR);
	bottonStateL=digitalRead(bottonL);
	bottonStateJump=digitalRead(bottonJump);
	bottonStateDash=digitalRead(bottonDash);

		if ((bottonStateR==1)||(bottonStateL==1)||(bottonStateJump==1)||(bottonStateDash==1)){
			
			DashMidAir();		
			WallHB(40,41,40);
			WallHB(20,21,40);
			movementPlayer();
			



			displayofAll();

			//HitBoxes of of the platforms while walking

			fallingFromPlatform(96,128,15);

			fallingFromPlatform(60,95,30);

			fallingFromPlatform(128,167,52);	

			fallingFromPlatform(96,128,52);
			
			if (bottonStateJump==1){
				  tone(bip,D,100);
  				delay(50);
  				tone(bip,A,200);
				//This works the same as the normal jump
				for(int i=0; i<8; i++) {

					PlayerCy= PlayerCy - raisingSpeed;

					DashMidAir();
					WallHB(40,41,40);
					WallHB(20,21,40);
					movementPlayer();
					
					if ((bottonStateDash==1)&&(floatX==1)){
						i=9;
						floatX=0;
					}
					bottonStateJump=digitalRead(bottonJump);
					//this helps that the first imput of jump doesnt overlap with the second jump
					if (bottonStateJump==0){

						bottonHoldJump=0;
					}
					if ((bottonStateJump==1)&&(numofJumps >= 1)&&(bottonHoldJump==0)){
						tone(bip,D,100);
  					delay(50);
  					tone(bip,A,200);
						
						i=0;
						numofJumps=0;
					}

					/*if ((PlayerCx > 86)&&(PlayerCy == 45)){
						PlayerCy = 45;
					}
					if ((PlayerCx > 60-PlayerSizeX-2)&&(PlayerCy == 32)&&(PlayerCx < 101)){
						PlayerCy = 32;
			
					}*/

					displayofAll();

				}
				falling();
				WallHB(40,41,40);
				WallHB(20,21,40);
				
				

				bottonStateJump=digitalRead(bottonJump);
			
			}
			bottonHoldJump=1;
			numofDashes=1;
			numofJumps=1;
			timeinAir=0;

			if ((PlayerCx==128-PlayerSizeX)&&(PlayerCy==15-PlayerSizeY)){
				/*display.clearDisplay();
				display.drawBitmap(0,0,YouWon,128,64,WHITE);
				display.display();
				delay(10000);*/


			}

		}
	}





	


